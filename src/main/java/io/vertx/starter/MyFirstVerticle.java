package io.vertx.starter;

import static io.vertx.starter.ApiHelper.created;
import static io.vertx.starter.ApiHelper.noContent;
import static io.vertx.starter.ApiHelper.ok;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;

import io.vertx.config.ConfigRetriever;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.CompositeFuture;
import io.vertx.core.Future;
import io.vertx.core.http.HttpServerResponse;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.jdbc.JDBCClient;
import io.vertx.ext.sql.SQLConnection;
import io.vertx.ext.sql.SQLOptions;
import io.vertx.ext.sql.UpdateResult;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;
import io.vertx.ext.web.handler.StaticHandler;


/**
 * @author Abishek
 * 
 * **/

public class MyFirstVerticle extends AbstractVerticle {

    private JDBCClient jdbc;

    @Override
    public void start(Future<Void> fut) {

        // Create a router object.
        Router router = Router.router(vertx);

        // Bind "/" to our hello message - so we are still compatible.
        router.route("/").handler(routingContext -> {
            HttpServerResponse response = routingContext.response();
            response
                .putHeader("content-type", "text/html")
                .end("<h1>Hello from my first Vert.x 3 application</h1>");
        });

        // Serve static resources from the /assets directory
        router.route("/assets/*").handler(StaticHandler.create("assets"));
        
        //My REST End points for my CRUD APP
        router.get("/api/Employees").handler(this::getAll);
        router.get("/api/Employees/:id").handler(this::getOne);
        router.route("/api/Employees*").handler(BodyHandler.create());
        router.post("/api/Employees").handler(this::addOne);
        router.delete("/api/Employees/:id").handler(this::deleteOne);
        router.put("/api/Employees/:id").handler(this::updateOne);

        ConfigRetriever retriever = ConfigRetriever.create(vertx);


        ConfigRetriever.getConfigAsFuture(retriever)
            .compose(config -> {
                jdbc = JDBCClient.createShared(vertx, new JsonObject()
                        .put("url", "jdbc:mysql://localhost:3306/test")
                        .put("user", "root")
                        .put("password", "root")
                        .put("driver_class", "com.mysql.jdbc.Driver")
                        .put("max_pool_size", 30));

                return connect()
                    .compose(connection -> {
                        Future<Void> future = Future.future();
                        createTableIfNeeded(connection)
                            .compose(this::createSomeDataIfNone)
                            .setHandler(x -> {
                                connection.close();
                                future.handle(x.mapEmpty());
                            });
                        return future;
                    })
                    .compose(v -> createHttpServer(config, router));

            })
            .setHandler(fut);
    }

    private Future<Void> createHttpServer(JsonObject config, Router router) {
        Future<Void> future = Future.future();
        vertx
            .createHttpServer()
            .requestHandler(router::accept)
            .listen(
                config.getInteger("HTTP_PORT", 8080),
                res -> future.handle(res.mapEmpty())
            );
        return future;
    }

    private Future<SQLConnection> connect() {
        Future<SQLConnection> future = Future.future();
        jdbc.getConnection(ar ->
            future.handle(ar.map(c ->
                    c.setOptions(new SQLOptions().setAutoGeneratedKeys(true))
                )
            )
        );
        return future;
    }

    private Future<Employee> insert(SQLConnection connection, Employee Employee, boolean closeConnection) {
        Future<Employee> future = Future.future();
        String sql = "INSERT INTO Employees (fullName, designation) VALUES (?, ?)";
        connection.updateWithParams(sql,
            new JsonArray().add(Employee.getFullName()).add(Employee.getDesignation()),
            ar -> {
                if (closeConnection) {
                    connection.close();
                }
                future.handle(
                    ar.map(res -> new Employee(res.getKeys().getLong(0), Employee.getFullName(), Employee.getDesignation()))
                );
            }
        );
        return future;
    }

    private Future<List<Employee>> query(SQLConnection connection) {
        Future<List<Employee>> future = Future.future();
        connection.query("SELECT * FROM Employees", result -> {
                connection.close();
                future.handle(
                    result.map(rs -> rs.getRows()
                    		.stream().map(Employee::new).collect(Collectors.toList()))
                );
            }
        );
        return future;
    }

    private Future<Employee> queryOne(SQLConnection connection, String id) {
        Future<Employee> future = Future.future();
        String sql = "SELECT * FROM Employees WHERE id = ?";
        connection.queryWithParams(sql, new JsonArray().add(Integer.valueOf(id)), result -> {
            connection.close();
            future.handle(
                result.map(rs -> {
                    List<JsonObject> rows = rs.getRows();
                    if (rows.size() == 0) {
                        throw new NoSuchElementException("No Employee with id " + id);
                    } else {
                        JsonObject row = rows.get(0);
                        return new Employee(row);
                    }
                })
            );
        });
        return future;
    }

    private Future<Void> update(SQLConnection connection, String id, Employee Employee) {
        Future<Void> future = Future.future();
        String sql = "UPDATE Employees SET title = ?, url = ? WHERE id = ?";
        connection.updateWithParams(sql, new JsonArray().add(Employee.getFullName()).add(Employee.getDesignation())
                .add(Integer.valueOf(id)),
            ar -> {
                connection.close();
                if (ar.failed()) {
                    future.fail(ar.cause());
                } else {
                    UpdateResult ur = ar.result();
                    if (ur.getUpdated() == 0) {
                        future.fail(new NoSuchElementException("No Employee with id " + id));
                    } else {
                        future.complete();
                    }
                }
            });
        return future;
    }

    private Future<Void> delete(SQLConnection connection, String id) {
        Future<Void> future = Future.future();
        String sql = "DELETE FROM Employees WHERE id = ?";
        connection.updateWithParams(sql,
            new JsonArray().add(Integer.valueOf(id)),
            ar -> {
                connection.close();
                if (ar.failed()) {
                    future.fail(ar.cause());
                } else {
                    if (ar.result().getUpdated() == 0) {
                        future.fail(new NoSuchElementException("Unknown Employee " + id));
                    } else {
                        future.complete();
                    }
                }
            }
        );
        return future;
    }

    private Future<SQLConnection> createTableIfNeeded(SQLConnection connection) {
        Future<SQLConnection> future = Future.future();
        vertx.fileSystem().readFile("table.sql", ar -> {
            if (ar.failed()) {
                future.fail(ar.cause());
            } else {
                connection.execute(ar.result().toString(),
                    ar2 -> future.handle(ar2.map(connection))
                );
            }
        });
        return future;
    }

    private Future<SQLConnection> createSomeDataIfNone(SQLConnection connection) {
        Future<SQLConnection> future = Future.future();
        connection.query("SELECT * FROM Employees", select -> {
            if (select.failed()) {
                future.fail(select.cause());
            } else {
                if (select.result().getResults().isEmpty()) {
                    Employee Employee1 = new Employee("Abhishek",
                        "Software Engineer");
                    Employee Employee2 = new Employee("Sunil",
                        "Release Manager");
                    Future<Employee> insertion1 = insert(connection, Employee1, false);
                    Future<Employee> insertion2 = insert(connection, Employee2, false);
                    CompositeFuture.all(insertion1, insertion2)
                        .setHandler(r -> future.handle(r.map(connection)));
                } else {
                    future.complete(connection);
                }
            }
        });
        return future;
    }


    // ---- HTTP Actions ----

    private void getAll(RoutingContext rc) {
        connect()
            .compose(this::query)
            .setHandler(ok(rc));
    }

    private void addOne(RoutingContext rc) {
        Employee Employee = rc.getBodyAsJson().mapTo(Employee.class);
        connect()
            .compose(connection -> insert(connection, Employee, true))
            .setHandler(created(rc));
    }


    private void deleteOne(RoutingContext rc) {
        String id = rc.pathParam("id");
        connect()
            .compose(connection -> delete(connection, id))
            .setHandler(noContent(rc));
    }


    private void getOne(RoutingContext rc) {
        String id = rc.pathParam("id");
        connect()
            .compose(connection -> queryOne(connection, id))
            .setHandler(ok(rc));
    }

    private void updateOne(RoutingContext rc) {
        String id = rc.request().getParam("id");
        Employee Employee = rc.getBodyAsJson().mapTo(Employee.class);
        connect()
            .compose(connection -> update(connection, id, Employee))
            .setHandler(noContent(rc));
    }

}

